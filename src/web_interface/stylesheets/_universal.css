@font-face { 
    src:
        local('Libertinus Mono'), 
        url('../../assets/LibertinusMono-Regular.ttf') format('truetype');
    font-family: 'Libertinus Mono';
    font-weight: 400;
    font-style: normal;
}

:root {
    --clr-txt: #343A40;
    --clr-bkg: hsl(210, 17%, 98%);
}

*,
*::before,
*::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    background-color: var(--clr-bkg);
    font-family: 'Libertinus Mono', monospace;
    display: flex;    
}

main {
   flex-grow: 2;
   max-width: 1200px;
   padding: 2vh 2vw 10vh 2vw;
}

main > * {
    margin-inline: auto;
}

a, button, textarea, input {
    font-family: inherit;
}

.info-msg {
    padding-top: 2rem;
    margin-inline: auto;
    max-width: 70ch;
    font-size: 1.2rem;
    text-align: center;
}

/*
 *
 *  States
 */

/* I created these states because sometimes in JS you may write e.g. 'div.style.display = "flex"',
but, by doing so, you embed CSS in the HTML ==> '<div style="display: flex"></div>',
that has higher priority compared to the CSS classes. 
And so, sometimes elements are shown/hidden and you don't understand why 
(especially if the codebase is big).
Therefore, I modify the state only via these CSS classes below. */

.display-block {
    display: block;
}

/* to 'flex' and 'hidden' I don't add the prefix 'display'
because it's pretty clear that's about displaying. */

.flex {
    display: flex;
}

.hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip-path: rect(0 0 0 0);
    white-space: nowrap;
    border: 0;
}

.display-none {
    display: none;
}

.vanish {
    animation: vanish 3s ease-in-out;
    animation-fill-mode: forwards;
}

@keyframes vanish {
      0% { display: flex; opacity: 1; }
     50% { opacity: 1; }
    100% { display: none; opacity: 0; }
}

.display-opaque {
    opacity: .5;
}
.display-opaque a,
.display-opaque button {
    pointer-events: none;
}

.selected {
    background-color: rgb(255, 185, 56);
}

/* A couple of considerations:
1) `create-account`, `delete-account`, `login`, `logout`, `read-post`, `write-post`, `write-reply` 
have pretty much the same elements with the same positioning on the page 
and the pages themselves are really minimal. 
Neverthless, I prefer to have a separate css file for each of them 
to layout their components individually in case in the future I want to do page-specific customizations.

2) I use `@import` in the .css files instead of using `<link>` in the corresponding HTML file
because I want to keep track of the styling priorities. Same reason for why I don't use inline-styling
inside the html tags. Otherwise it can become messy and then you start relying on '!important' */
